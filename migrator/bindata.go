// Code generated by go-bindata.
// sources:
// migrations/001_users.sql
// migrations/002_jobs.sql
// DO NOT EDIT!

package migrator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcd\xae\x12\x31\x18\x86\xf7\xbd\x8a\x6f\xc7\x10\x4b\x42\xc4\x31\x18\x56\x05\x8a\x36\x96\x19\xd2\xe9\x10\x59\x4d\x8a\x53\x70\x92\xf9\x31\x9d\x1a\xd7\xea\x56\x2f\xc1\xc4\x4b\x60\x2d\xd1\x6b\xe8\xdc\x91\x69\x30\x73\x20\x24\xe7\x2c\xdb\xef\x69\xfb\x3e\xcd\x3b\x1a\xc1\xb3\xaa\x38\x1a\x65\x35\xa4\x1f\x11\x5a\x08\x4a\x24\x05\x49\xe6\x9c\xc2\xa7\x56\x9b\x36\x40\x00\x45\x0e\x73\xf6\x3a\xa1\x82\x11\x0e\x1b\xc1\xd6\x44\xec\xe0\x2d\xdd\x61\x04\xf0\xde\x68\x65\x75\x9e\x29\x0b\x92\xad\x69\x22\xc9\x7a\x03\x4b\xba\x22\x29\x97\xb0\x48\x85\xa0\x91\xcc\xfa\x89\x3f\x61\x75\xa9\x8f\x46\x55\xd9\xcd\xb5\x51\x2c\x21\x4a\x39\xf7\xc4\xa1\x30\xad\xcd\x6a\x55\x69\xd8\x12\xb1\x78\x43\x44\xf0\x3c\x0c\x87\x37\x4c\xa9\x9e\x44\x7c\xfe\xc7\x89\x26\x6f\x2a\x6d\xb5\xf1\x39\x58\x24\xfb\x59\x2f\x30\xf6\x94\xae\xd5\xbe\xd4\x59\xd5\xd4\x85\x6d\x4c\x51\x1f\x61\x1e\xc7\x9c\x92\xe8\x9e\x5f\x11\x9e\x50\x34\x9c\x21\xc4\xa2\x84\x0a\x09\x2c\x92\xf1\xe5\x23\x21\xb8\x12\xc7\x57\x8e\xf8\xc1\x05\xf7\x99\x71\x9f\x0d\xdf\xbf\x3f\x44\x5b\xc2\x53\x9a\x20\x80\x20\x1c\x4f\xa6\x2f\xa7\xaf\x26\x2f\x30\x0c\xdc\xaf\xee\x5b\xf7\xc5\x9d\xdd\xc9\xfd\x19\xf8\xf5\x4f\x77\xea\x7e\xb8\x73\xf7\xbd\xfb\xea\xfe\xba\xdf\x7e\x6f\xaf\xea\xbc\xb0\xd9\x87\xc2\xe8\x70\x80\x61\x8c\xe1\xa0\xca\x56\xfb\xc8\xd7\x65\x58\x36\x9f\x6b\x84\x96\x22\xde\xfc\x2f\x03\x5b\x01\x7d\xc7\x12\x99\x5c\x6c\x66\xff\x02\x00\x00\xff\xff\x4a\x07\x46\x3b\x3a\x02\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_jobsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdd\x4e\x1a\x5b\x18\xbd\x9f\xa7\xf8\xee\x80\x9c\x4d\x32\x80\xe4\x1c\xe2\xd5\x08\x5b\xcf\xa4\x14\xcc\x30\x9a\x7a\x65\x68\x98\x1a\x1a\x05\x03\x98\xf6\x12\xd0\xa4\x4d\x34\xd1\x68\xd3\x26\x8d\x89\x3f\xed\x03\x4c\x50\xea\x14\x98\xf1\x15\xd6\x7e\xa3\x66\x0f\x56\x19\x0b\x58\xe4\x86\x64\xef\x35\xeb\x5b\xeb\xfb\xdb\xd1\x28\xfd\xb3\x55\xde\xa8\x15\x1b\x16\xad\x6c\x2b\x4a\xda\xe0\x9a\xc9\xc9\xd4\x16\xb2\x9c\xde\x56\x5f\xd7\xc3\x0a\x51\xb9\x44\x8f\x7e\x0b\xfa\x52\x81\x1b\xba\x96\xa5\x65\x43\x7f\xa9\x19\x6b\xf4\x82\xaf\x31\x85\x68\xa7\x6e\xd5\xd6\x03\xf8\x05\x7d\x49\xcf\x99\x94\xcb\x9b\x94\x5b\xc9\x66\xc9\xe0\x8b\xdc\xe0\xb9\x34\x2f\xf8\xe0\x7a\xb8\x5c\x8a\x50\x3e\x47\x19\x9e\xe5\x26\xa7\xb4\x56\x48\x6b\x19\x2e\xb9\x2a\xc5\x2d\x2b\x18\x76\x55\x33\xd2\xff\x6b\x46\x38\x9e\x4c\x46\xee\x19\x25\xb4\x66\x6d\xec\x6c\x16\x1b\xe5\x6a\x65\x42\x58\x09\xda\x2c\xd6\x1b\xeb\x3b\xdb\xa5\x62\xc3\x2a\xad\x17\x1b\x12\x95\x91\x66\xff\xc0\x54\x4b\xd5\x2d\xab\x61\xd5\x26\x32\x55\xac\xf7\x7f\x81\xda\xb4\xde\x3c\x81\x52\x22\xf3\x8a\xa2\xe7\x0a\xdc\x30\x49\xcf\x99\x79\x3f\xe3\x14\xbe\x4b\x22\xf3\x33\xc0\x46\xcc\xb1\xc7\x1e\x58\x50\x30\x0b\x2a\x63\x41\x09\x11\x65\x55\xcb\xae\xf0\x82\x42\x14\x8e\x31\x0a\xe1\x14\xb6\x68\xa1\x0f\x8f\xf0\x09\xc7\xb8\x60\x24\xf6\xe0\xa0\x2f\x0e\x44\x5b\x34\x09\x83\xe1\xbd\x38\x84\x2b\xf6\xf1\x33\xc4\x28\xa6\xaa\xaa\xca\x28\x14\x57\x63\xa9\xa8\xfa\x5f\x34\x96\x94\x87\xb1\x94\x7f\x1a\x8b\x0f\xff\x53\x09\x55\x8d\xb0\xfb\x28\xe7\xe8\xe2\x4a\xec\xa2\x0f\x47\x34\xe1\xa1\x83\x1e\x6c\x42\x0f\x7d\xd8\xb8\x85\x0d\x57\x1e\x86\x18\x25\xee\xc9\xd5\x07\xf2\xc9\xbc\xc7\xf0\x70\x83\x6b\xb1\x2b\x3e\x0e\xf5\x05\xd4\x87\x18\xc5\xa7\x8a\x4d\x8c\x25\xfd\x3e\xe2\x5f\xb4\x60\xcb\xec\xc0\x85\xfd\x4c\xba\x91\x0c\x1f\xe1\x2b\xce\x70\x16\x62\x34\x97\x9c\xc9\xe7\x17\xd8\xb8\x86\x0b\x47\x3a\x6c\xa2\x2b\x2d\xa3\x27\xda\xf0\x7c\x97\xb1\xe4\x54\x59\x73\xe3\x4b\x62\xcb\xd4\xc1\x16\x6d\x59\x8c\xd9\x35\x5d\xca\xe0\x18\xf8\x15\x70\x61\x8b\x43\xc2\x0f\x38\xb8\x46\x0f\x9e\x68\x89\xb6\x38\x98\x9d\xf3\x08\xae\x68\xc3\x11\x7b\xa2\x09\x07\x37\xbf\xbb\x6d\x06\x86\xcf\x41\x09\x84\x13\x7c\xc3\xf9\xec\x4a\x2e\xd0\x41\x57\x7c\x80\xf3\x0c\x0d\x67\xf0\x30\x90\x6d\x3d\xed\xdb\xf8\xdd\xc5\x98\x49\x19\xa0\x0b\x77\xa8\xfd\x1c\xa7\x92\xe4\x71\xdf\xc5\x13\x23\x05\x8e\xcf\x3d\xcd\xe4\xc2\xf6\x0d\xb5\xfc\x49\xbb\x82\xf7\x0c\x69\x27\x7e\xc7\x78\xe8\x88\x7d\x74\x03\x83\xf6\xe0\x74\x4c\x13\xfe\x3b\x65\x2f\x5c\xc2\xc3\xad\xdc\x0a\xe8\x8c\x9f\xdf\x54\x40\x62\x2a\xaa\x26\x26\x2d\x9b\x79\x45\x19\x7d\xc8\x32\xd5\x77\x15\x45\xc9\x18\xf9\xe5\xbb\x87\x4c\x5f\x24\xfe\x4a\x2f\x98\x05\x7f\xc1\xce\xff\x0a\x00\x00\xff\xff\xad\xa0\x8d\x9d\xf5\x06\x00\x00")

func migrations002_jobsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_jobsSql,
		"migrations/002_jobs.sql",
	)
}

func migrations002_jobsSql() (*asset, error) {
	bytes, err := migrations002_jobsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_jobs.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql": migrations001_usersSql,
	"migrations/002_jobs.sql":  migrations002_jobsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql": &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_jobs.sql":  &bintree{migrations002_jobsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
