// Code generated by go-bindata.
// sources:
// migrations/001_users.sql
// migrations/002_jobs.sql
// DO NOT EDIT!

package migrator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\xca\x13\x31\x14\x86\xf7\xb9\x8a\xb3\xeb\x14\xf3\x41\xf1\x73\xa4\xd2\x55\xda\xa6\x1a\x4c\x67\x4a\x26\x53\xec\x6a\x48\x9d\xb4\x0e\xcc\x4f\xc9\xa4\xb8\x56\xb7\x7a\x09\x82\x97\xd0\xb5\x45\xaf\x21\x73\x47\x12\x2a\x63\x4b\x41\x71\x99\x9c\xe7\x90\xf7\x09\xef\xc3\x03\x3c\xa9\x8a\xbd\x51\x56\x43\x7a\x40\x68\x26\x28\x91\x14\x24\x99\x72\x0a\xc7\x56\x9b\x36\x40\x00\x45\x0e\x53\xf6\x32\xa1\x82\x11\x0e\x2b\xc1\x96\x44\x6c\xe0\x35\xdd\x60\x04\xf0\xd6\x68\x65\x75\x9e\x29\x0b\x92\x2d\x69\x22\xc9\x72\x05\x73\xba\x20\x29\x97\x30\x4b\x85\xa0\x91\xcc\xfa\x89\xdf\x38\x1e\xf2\xff\xdc\xb0\xba\xd4\x7b\xa3\xaa\xec\x26\x48\x14\x4b\x88\x52\xce\x3d\xb1\x2b\x4c\x6b\xb3\x5a\x55\x1a\xd6\x44\xcc\x5e\x11\x11\x3c\x0d\xc3\xe1\x0d\x53\xaa\x7f\x22\xde\xf8\xef\x44\x93\x37\x95\xb6\xda\xf8\x1c\x2c\x92\xfd\xac\x17\x18\x79\x4a\xd7\x6a\x5b\xea\xac\x6a\xea\xc2\x36\xa6\xa8\xf7\x30\x8d\x63\x4e\x49\x74\xcf\x2f\x08\x4f\x28\x1a\x4e\x10\x62\x51\x42\x85\x04\x16\xc9\xf8\xf2\xf5\x10\x5c\x89\xe3\x2b\x47\xfc\xc7\x05\xf7\x99\x71\x9f\x0d\xdf\xbf\x3f\x44\x6b\xc2\x53\x9a\x20\x80\x20\x1c\x3d\x8e\x9f\x8f\x5f\x3c\x3e\xc3\x30\x70\xdf\xba\x4f\xdd\x07\x77\x76\x27\xf7\x63\xe0\xcf\x5f\xdd\xa9\xfb\xe2\xce\xdd\xe7\xee\xa3\xfb\xe9\xbe\xfb\xbb\xad\xaa\xf3\xc2\x66\xef\x0a\xa3\xc3\x01\x86\x11\x86\x9d\x2a\x5b\xed\x23\x5f\xd7\x67\xde\xbc\xaf\x11\x9a\x8b\x78\xf5\xbb\x3e\x6c\x01\xf4\x0d\x4b\x64\x72\xb1\x99\xfc\x0a\x00\x00\xff\xff\x57\xd5\x32\x95\x6c\x02\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_jobsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x5d\x8f\xda\x46\x14\x7d\xf7\xaf\xb8\x6f\x80\x3a\xa8\xf6\x26\xa8\x45\xfb\xe4\x85\xd9\xd4\xaa\x63\x56\xb6\x89\xba\x4f\x2b\x5a\xdc\x8a\x8a\x0d\x2b\x20\xaa\xf6\x0d\x48\xa4\x56\x4a\xa4\x44\x49\xd5\x4a\x6d\x24\x36\x69\x7f\x80\x45\x96\x86\x02\x76\xfe\xc2\x99\x7f\x54\xcd\xc0\x02\xe6\x23\xda\x50\x3f\xfa\xce\x9c\x7b\xce\xb9\xf7\xce\xcd\x66\xe9\xb3\xf3\xda\x0f\xcd\x4a\x3b\xa0\xf2\x85\xa6\x15\x5c\x6e\xfa\x9c\xfc\xd3\x13\x4e\xed\xcb\x8b\xa0\x45\xa6\x47\xdc\x29\xdf\xa7\x74\xaa\x51\x6d\x9c\x07\xed\xa0\x99\x62\x94\xaa\x56\xda\x41\x2a\x73\xb8\xbc\x60\x1e\xd9\x9c\x7e\x6c\x7c\xdb\x4a\x6b\x44\xb5\x2a\xad\x7f\x47\xd6\x3d\x8f\xbb\x96\x69\xd3\x89\x6b\xdd\x37\xdd\x53\xfa\x9a\x9f\x32\x8d\xe8\x51\x2b\x68\x9e\x25\x2f\x1c\x59\xf7\x2c\xc7\x27\xa7\xe4\x93\x53\xb6\x6d\x72\xf9\x31\x77\xb9\x53\xe0\x9e\x3a\xdd\x4a\xd7\xaa\x19\x2a\x39\x54\xe4\x36\xf7\x39\x15\x4c\xaf\x60\x16\xb9\x04\x93\x94\xd7\x12\x2b\x15\x32\xf6\xb0\x72\xbe\x1e\x7b\x60\xba\x85\xaf\x4c\x37\x7d\x90\xcb\x65\x16\xe9\xe4\xd9\x8b\xa0\x79\x56\xad\x5c\xb6\x76\x93\xba\x39\x75\x63\xca\xee\x53\xf5\x4a\xab\x7d\x26\xfd\x5a\x62\x15\x4d\x9f\x2f\x42\x49\x84\xed\x69\x6a\x8d\x6a\xed\xbb\x4a\xbd\x7e\x79\x93\xa6\x54\xb2\xb9\x29\x1d\x38\x36\xcb\xb6\x4f\xed\xe6\xa3\x40\x93\xe5\xb0\x1c\x8f\xbb\x3e\x59\x8e\x5f\x52\xd5\xa0\xf4\xdc\x5f\xa6\xf4\x33\x65\x07\x5b\xe8\x63\x09\x0d\x6c\xc9\x95\x25\xb9\xb1\x04\x89\x8c\xf6\xc0\xb4\xcb\xdc\xd3\x88\xd2\x06\xa3\x14\x5e\x23\x14\x5d\x4c\x10\x13\x7e\xc5\x4b\xbc\x61\x24\x9e\x60\x84\x89\x78\x26\x7a\xa2\x43\x98\xce\xe2\xe2\x39\x22\xf1\x14\xff\xca\x06\x5a\x69\x26\x9d\x91\xa1\xeb\xba\xce\x28\x75\xa0\x1b\xf9\xac\xfe\x65\xd6\xc8\xa5\x18\x19\x46\x5e\xfd\x95\xe2\x32\x6c\x91\xec\x0a\x43\xbc\x13\x8f\x31\xc1\x48\x74\x10\x63\x80\x31\x42\xc2\x18\x13\x84\xf8\x80\x10\x91\xfc\xb9\x99\xe3\xce\x22\x87\xbe\xcc\xb1\x09\xff\x12\x31\xde\xe3\x5a\x3c\x16\xbf\xcc\xd8\x26\xb4\x6c\xc2\x1e\x7c\x02\xf5\xbf\x57\x4c\x11\x5d\x84\xd2\x32\x44\x08\xff\x1f\xea\x8a\xfb\x2f\xf0\x07\xfa\xe8\x6f\xe2\xdd\xcd\xdd\x4a\xfc\xef\x08\x71\x8d\x08\x23\x29\xbb\x83\xa1\xf4\x01\x63\xd1\x43\xbc\x4d\xba\x91\xfb\x94\xaa\x85\xd2\x56\x84\xa2\x27\xeb\xb5\x37\xc3\xb7\x92\x0a\xa6\xaa\x48\x11\x42\xf1\x9c\xf0\x0f\x46\xb8\xc6\x18\xb1\xe8\x8a\x9e\x78\xb6\x37\xf4\x0b\x44\xa2\x87\x91\x78\x22\x3a\x18\xe1\xfd\x8e\x2e\xbd\x05\xd0\x6f\x49\x42\x84\x57\xf8\x0b\x57\x7b\xf3\x7a\x83\x01\x86\xe2\x67\x8c\xf6\x67\xd4\x47\x8c\xa9\x1c\x8e\xfd\x21\xe4\xd8\x4d\x31\x44\x34\x13\x74\x85\xd7\x5b\xb0\xd6\xdb\xf6\xe0\xce\xc7\xe7\x78\x01\x18\x21\x54\x2a\xbb\x6a\x7a\xdf\x21\xde\x9f\xe8\x2b\xd5\x69\x31\x06\xe2\x29\x86\x89\xe1\xdd\x29\x7f\x4b\x0f\x7f\xb1\x85\xf1\x5b\xc4\xf8\x20\xdf\x1d\x0c\x6e\xf5\x34\xe4\x13\x84\xf3\x59\xfd\x23\x6e\xfc\xa9\x1a\xaf\xf7\x39\xfa\xf2\x51\x93\x8d\xa3\x1c\x19\xcf\xaa\xae\xd6\x2d\xa3\xbb\xba\xc2\x9d\x93\xcd\x67\x75\x63\x05\xf0\xfb\x4a\xbd\x15\xc8\x1d\xb0\xba\xd3\x8b\x8d\x9f\x1e\x6a\x5a\xd1\x2d\x9d\xcc\x57\xb4\x75\x4c\xfc\x1b\xcb\xf3\x3d\xb5\x1e\x0e\xe7\x21\xb9\xee\x97\x11\xb5\x32\x0f\xff\x0b\x00\x00\xff\xff\x34\xe9\xe4\x61\x1b\x08\x00\x00")

func migrations002_jobsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_jobsSql,
		"migrations/002_jobs.sql",
	)
}

func migrations002_jobsSql() (*asset, error) {
	bytes, err := migrations002_jobsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_jobs.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql": migrations001_usersSql,
	"migrations/002_jobs.sql":  migrations002_jobsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql": &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_jobs.sql":  &bintree{migrations002_jobsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
