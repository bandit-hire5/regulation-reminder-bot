// Code generated by go-bindata.
// sources:
// migrations/001_users.sql
// migrations/002_jobs.sql
// DO NOT EDIT!

package migrator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xdf\x6e\xd3\x30\x14\x87\xef\xfd\x14\xe7\xae\xa9\xf0\xa4\x94\x11\xd8\xb4\x2b\xb7\x75\xc1\xc2\x4d\x2a\xc7\x99\xd8\x55\xe4\x11\x2f\x44\xca\x9f\xc9\xf1\xe0\x1a\xb8\x85\x47\x40\xe2\x11\x76\xcd\x04\xcf\xe0\xbc\x11\xb2\x8a\xd2\x56\x95\x80\x5d\x25\xf6\xf9\x8e\xf4\xfb\x8e\xcf\xc9\x09\x3c\x69\xaa\xd2\x28\xab\x21\xbb\x45\x68\x21\x28\x91\x14\x24\x99\x73\x0a\x77\xbd\x36\x7d\x80\x00\xaa\x02\xe6\xec\x65\x4a\x05\x23\x1c\x36\x82\xad\x89\xb8\x82\xd7\xf4\x0a\x23\x80\xb7\x46\x2b\xab\x8b\x5c\x59\x90\x6c\x4d\x53\x49\xd6\x1b\x58\xd2\x15\xc9\xb8\x84\x45\x26\x04\x8d\x65\x3e\x56\x7c\xc7\xdd\x6d\xf1\xc8\x0e\xab\x6b\x5d\x1a\xd5\xe4\x07\x41\xe2\x44\x42\x9c\x71\xee\x89\x9b\xca\xf4\x36\x6f\x55\xa3\xe1\x92\x88\xc5\x2b\x22\x82\xa7\x51\x34\x3d\x60\x6a\xf5\x4f\xc4\x1b\xff\x9d\x50\xef\xcb\xbc\x2b\xba\x46\x5b\x6d\x7c\x16\x16\xcb\xb1\x3e\x4a\x84\x9e\xfc\x3f\x4a\xb7\xea\xba\xd6\x79\xd3\xb5\x95\xed\x4c\xd5\x96\x30\x4f\x12\x4e\x49\x7c\xcc\xaf\x08\x4f\x29\x9a\x5e\x20\xc4\xe2\x94\x0a\x09\x2c\x96\xc9\xf6\x91\x20\xd8\x1b\x11\xde\x9b\x06\xde\x59\xe3\xd1\x0e\x1f\x58\x60\xd8\xfd\x1d\xa5\x99\xa2\x4b\xc2\x33\x9a\x22\x80\x20\x0a\x4f\xcf\x9e\x9f\x9d\x9f\x3e\xc3\x30\x71\xdf\x87\xcf\xc3\x47\xf7\xe0\xee\xdd\xcf\x89\x3f\x7f\x73\xf7\xc3\x57\xf7\x30\x7c\x19\x3e\xb9\x5f\xee\x87\xbf\xbb\x56\x6d\x51\xd9\xfc\x5d\x65\x74\x34\xc1\x30\x0b\xc3\x10\xc3\x6c\x76\xfe\xc2\x7f\x6f\x54\xdd\x6b\xef\xb2\xbf\x81\xcb\xee\x43\x8b\xd0\x52\x24\x9b\x3f\x1b\xc8\x56\x40\xdf\xb0\x54\xa6\x5b\xcd\x8b\xdf\x01\x00\x00\xff\xff\x51\xd2\x69\x2f\xaf\x02\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_jobsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x5d\x6f\x1a\x47\x14\x7d\xdf\x5f\x71\xdf\x00\x75\x50\x17\x12\xd4\x22\x3f\xad\x61\x9c\xae\xba\x59\xac\xdd\x25\xaa\x9f\x2c\x5a\xb6\x15\x15\x0e\x16\x10\x55\x7e\x03\x12\xa9\x95\x12\x29\x51\x52\xb5\x52\x1b\x09\x27\xed\x0f\x58\x11\x53\x53\x60\xd7\x7f\xe1\xcc\x3f\xaa\x66\xb0\x81\xe5\xc3\xb2\xe9\x3e\xee\x9d\x39\xf7\x9c\x73\xef\x9d\x9b\x4e\xd3\x67\x27\xb5\x1f\x9a\x95\xb6\x4f\xe5\x53\x4d\x2b\x38\xdc\xf0\x38\x79\x47\x87\x9c\xda\x67\xa7\x7e\x8b\x0c\x97\xb8\x5d\x7e\x4c\xc9\x44\xa3\xda\x38\xf1\xdb\x7e\x33\xc1\x28\x51\xad\xb4\xfd\x44\x6a\x6f\x71\xc1\xd8\xb7\x38\xfd\xd8\xf8\xb6\x95\xd4\x88\x6a\x55\x5a\xfd\xf6\xcd\x47\x2e\x77\x4c\xc3\xa2\x43\xc7\x7c\x6c\x38\x47\xf4\x35\x3f\x62\x1a\xd1\xb3\x96\xdf\x3c\x8e\x5f\xd8\x37\x1f\x99\xb6\x47\x76\xc9\x23\xbb\x6c\x59\xe4\xf0\x03\xee\x70\xbb\xc0\x5d\x75\xba\x95\xac\x55\x53\x54\xb2\xa9\xc8\x2d\xee\x71\x2a\x18\x6e\xc1\x28\x72\x09\x26\x29\xaf\x24\x56\x2a\x64\xec\x69\xe5\x64\x35\xf6\xc4\x70\x0a\x5f\x19\x4e\x32\x9b\xcb\xa5\xe6\xe9\xe4\xd9\x53\xbf\x79\x5c\xad\x9c\xb5\xb6\x93\xba\x39\x75\x63\xca\xf6\x53\xf5\x4a\xab\x7d\x2c\xfd\x5a\x60\x15\x0d\x8f\xcf\x43\x71\x84\xcd\x69\x6a\x8d\x6a\xed\xbb\x4a\xbd\x7e\x76\x93\xa6\x54\xb2\xb8\x21\x1d\x38\x30\xca\x96\x47\xed\xe6\x33\x5f\x93\xe5\x30\x6d\x97\x3b\x1e\x99\xb6\x57\x52\xd5\xa0\xe4\xb5\xbf\x4c\xe9\x67\xca\x0e\x36\xd7\xc7\x62\x1a\xd8\x82\x2b\x8b\x73\x63\x31\x12\x29\xed\x89\x61\x95\xb9\xab\x11\x25\x33\x8c\x12\x78\x8f\x40\x74\x31\x41\x44\xf8\x15\x6f\xf1\x81\x91\x78\x81\x11\x26\xe2\x95\xe8\x89\x0e\x61\x3a\x8b\x8b\xd7\x08\xc5\x4b\xfc\x2b\x1b\x68\xa9\x99\x74\x46\x19\x5d\xd7\x75\x46\x89\xac\x9e\xc9\xa7\xf5\x2f\xd3\x99\x5c\x82\x51\x26\x93\x57\x7f\xa5\xb8\x14\x9b\x27\x3b\xc7\x10\x9f\xc4\x73\x4c\x30\x12\x1d\x44\x18\x60\x8c\x80\x30\xc6\x04\x01\xae\x10\x20\x94\x3f\xd7\x73\x3c\x98\xe7\xd0\x17\x39\xd6\xe1\xdf\x22\xc2\x25\x2e\xc4\x73\xf1\xcb\x8c\x6d\x4c\xcb\x3a\x6c\xf6\x1e\xd4\xff\x5e\x32\x45\x74\x11\x48\xcb\x10\x22\xf8\x7f\xa8\x4b\xee\xbf\xc1\x1f\xe8\xa3\xbf\x8e\xf7\x30\x77\x27\xf1\xbf\x23\xc0\x05\x42\x8c\xa4\xec\x0e\x86\xd2\x07\x8c\x45\x0f\xd1\x26\xe9\x99\xdc\x7d\xaa\x16\x48\x5b\x11\x88\x9e\xac\xd7\xce\x0c\x3f\x4a\x2a\x98\xaa\x22\x85\x08\xc4\x6b\xc2\x3f\x18\xe1\x02\x63\x44\xa2\x2b\x7a\xe2\xd5\xce\xd0\x6f\x10\x8a\x1e\x46\xe2\x85\xe8\x60\x84\xcb\x2d\x5d\x7a\x07\xa0\xdf\xe2\x84\x08\xef\xf0\x17\xce\x77\xe6\xf5\x01\x03\x0c\xc5\xcf\x18\xed\xce\xa8\x8f\x08\x53\x39\x1c\xbb\x43\xc8\xb1\x9b\x62\x88\x70\x26\xe8\x1c\xef\x37\x60\xad\xb6\x6d\xf6\xc1\xed\x73\x3c\x07\x0c\x11\x28\x95\x5d\x35\xbd\x9f\x10\xed\x4e\xf4\x9d\xea\xb4\x08\x03\xf1\x12\xc3\xd8\xf0\x6e\x95\xbf\xa1\x87\xbf\xd8\xc0\xf8\x23\x22\x5c\xc9\x77\x07\x83\x3b\x3d\x0d\xf9\x18\xe1\x7c\x5a\xbf\xc5\x8d\x3f\x55\xe3\xf5\x3e\x47\x5f\x3e\x6a\xb2\x71\x94\x23\xe3\x59\xd5\xd5\xba\x65\xf4\x50\x57\xb8\x6a\x31\xcc\x81\xbe\xaf\xd4\x5b\xbe\x7c\xfb\x97\x77\x79\xb1\xf1\xd3\x53\x4d\x2b\x3a\xa5\xc3\xeb\xd5\x6c\x1e\x10\xff\xc6\x74\x3d\x57\xad\x85\xbd\xeb\x90\x5c\xf3\x8b\x88\x5a\x95\x7b\xff\x05\x00\x00\xff\xff\x5b\xf6\xb1\x8d\x13\x08\x00\x00")

func migrations002_jobsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_jobsSql,
		"migrations/002_jobs.sql",
	)
}

func migrations002_jobsSql() (*asset, error) {
	bytes, err := migrations002_jobsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_jobs.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql": migrations001_usersSql,
	"migrations/002_jobs.sql":  migrations002_jobsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql": &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_jobs.sql":  &bintree{migrations002_jobsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
